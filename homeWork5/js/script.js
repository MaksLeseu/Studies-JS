

/* Задание 1:
    Создать функцию isEmpty(obj), которая возвращает true, если в объекте нет свойств и false – если хоть одно
    свойство есть. 
*/

var arr = {};

var brr = {name: 'Maks', age: 25, country: 'Poland'};

function isEmpty (obj) {
    
    for (var key in obj) {
        if (key) {
            alert('false');
        } 
        return;
    }
    alert('true');
}

isEmpty(arr);


/* Задание 2:
    Написать функцию pow(x, n), которая возвращает x в степени n,
    иначе говоря, умножает x на себя n раз и возвращает результат.
    Запросить у пользователя x и n, а затем вывести результат pow(x, n).
    В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.
*/

var valueX = Number(prompt('Напишите число:'));
var valueN = Number(prompt('Напишите число:'));

if (valueN < 1) {
    alert('Неправильное число');
} else {
    alert (pow(valueX, valueN));
}

function pow (x, n) {
    var sum = x; 

    for (var i = 1; i < n; i++) {
        sum = sum * x; 
    }
    return sum; 
}


/* Задание 3:
    Написать функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
      sumTo(1) = 1
      sumTo(2) = 2 + 1 = 3
      sumTo(3) = 3 + 2 + 1 = 6
      sumTo(4) = 4 + 3 + 2 + 1 = 10
      sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050

    Сделать три варианта решения:
      - с использованием цикла
      - через рекурсию, sumTo(n) = n + sumTo(n-1) для n > 1
      - с использованием формулы для суммы арифметической прогрессии

    Ответить на вопросы в комментариях:
      Какой вариант решения самый быстрый? Самый медленный? Почему?
      Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему? 
*/



function sumTo (n) {
    var sum = 0;

    for (var i = 1; i < n; i++) {
        sum = sum + i; 
    }
    var result = sum + n; 
    return result;
}

alert(sumTo(4));

// В процессе решения ....